{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 Cambria;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green51\blue204;\red153\green102\blue204;\red102\green153\blue51;
\red204\green153\blue51;}
{\info
{\author Jim}}\margl1440\margr1440\vieww12540\viewh15820\viewkind1
\deftab720
\pard\pardeftab720\ri0\sl480\slmult1\partightenfactor0

\f0\b\fs28 \cf0 Abstract
\f1 \
\pard\pardeftab720\ri0\sl480\slmult1\partightenfactor0

\f0\b0\fs22 \cf0 This is the final project report for EE4144, Introduction to Embedded Systems with Professor Dr. Prashanth Krishnamurthy. Please contact Jim Dong if before using any parts of this code.  
\f1 \

\f0 The goal of this project was to create a sound synthesizer using a STM32F4 Discovery Board. The STM32F4 board would take an input from a terminal emulator, in this case, we used Tera Term, and output a specific frequency. The concept is to create a MIDI piano keyboard where a key on a standard computer keyboard would map to a specific frequency of a key on a piano. Outputting sound needs to be done in real time as this would be expected of an instrument. The amount of time the sound outputted should also be faithful to the amount of time a key on a piano outputs its sound. Of course, simply outputting a single frequency would not sound like like a frequency played on a piano because a musical pitch consists of several different frequencies besides the fundamental frequency. To simulate musical pitch digitally would require complex transformations, which is beyond what the STM32F4 board is capable of and beyond the scope of the project, and as a result, we will only consider outputting the fundamental frequency. After extensive testing of the STM32F4 project, it has been concluded that the project was successful in meeting its stated goals.                             
\f1 \
\
\pard\pardeftab720\ri0\sl480\slmult1\partightenfactor0

\f0\b\fs28 \cf0 Introduction
\f1\b0\fs22 \
\pard\pardeftab720\ri0\sl480\slmult1\partightenfactor0

\f0 \cf0 This project serves as a way to apply the concepts of an embedded system using things learned from lectures and laboratory experiments in EE4144, Introduction to Embedded Systems.
\f1 \

\f0 It consists of using a standard US computer keyboard where the user can input characters from the keyboard into a terminal emulator. The terminal emulator connects to a serial port which allows a byte of data from the user to be sent to that port. The STM32F4 board will read a value from the serial port and calculate a digital value to be sent to the on-board CS43L22 Digital-to-Analog converter (DAC). This chip converts the digital value into the corresponding analog value to be output from the speaker. The STM32F4 board provides a 3.5mm audio jack to connect a speaker or headphone.  
\f1 \
\
\pard\pardeftab720\ri0\sl480\slmult1\partightenfactor0

\f0\b\fs28 \cf0 Description
\f1\b0\fs22 \
\pard\pardeftab720\ri0\sl480\slmult1\partightenfactor0

\f0\b \cf0 Hardware Components
\f1\b0 \
\pard\pardeftab720\ri0\sl480\slmult1\partightenfactor0

\f0 \cf0 Three interfaces were used on the STM32F4 Discovery Board, the mini-USB, the micro-USB and the audio jack. The mini-USB provides power to the board and allows writing of a program to the board\'92s flash memory using KEIL uVision software. The micro-USB allows a serial port connection between the board and a computer. The audio jack allows a speaker or headphone to be connected to the board. The onboard Digital-to-Audio chip, Cirrus Logic CS43L22, controls this audio interface
\f1 .\
\pard\pardeftab720\ri0\sl480\slmult1\partightenfactor0

\f0\b \cf0 Software Libraries 
\f1\b0 \
\pard\pardeftab720\ri0\sl480\slmult1\partightenfactor0

\f0 \cf0 There were two software libraries utilized by this project to create a serial port connection between the STM32F board and a computer and to output a sound by controlling the Cirrus Logic CS43L22 chip. The USB VCP for STM32F4xx was written by Tilen Majerle, and provides a way to read and write a byte to a serial port. It also provides is a way to check if the serial port is connected. The second library utilized was written by Andreas Finkelmeyer and allows us to send a single 16-bit audio sample to the speaker. 
\f1 \

\f0 For the computer to interface with the serial port, the STM32 virtual COM port driver would need to be installed which provides virtualization of a communication port as if it were a real port. This allows a program like PuTTY or Tera Term to connect to the serial COM port, which will allow the user to send a byte from a keyboard to the serial COM port using the terminal.   
\f1 \
\pard\pardeftab720\ri0\sl480\slmult1\partightenfactor0

\f0\b \cf0 Project Software
\f1\b0 \
\pard\pardeftab720\ri0\sl480\slmult1\partightenfactor0

\f0 \cf0 There are three main functions that provide most of the functionality to the program. The function, read_serial_usb_byte(&k), allows the program to read a byte from the serial port and store this byte into the memory that is pointed to by &k. The value of k would be generated by the keyboard input from the user. Each character on a computer keyboard corresponds to a different byte value. Since there are eight bits in a byte, a maximum of 256 different characters is possible. A single audio sample can be calculated by: audio_sample = (int16_t) (volume * arm_sin_f32(audio_freq*ts)), which calculates a single 16 bit sample that is able to be outputted through the speaker.  The volume variable corresponds the amplitude of the generated sine wave. The audio_freq variable would be the frequency at which the sound would be outputted by the speaker. This value is multiplied by, ts, time in seconds and the sin of the product would be calculated. This value would then be converted into a 16-bit number and set as the audio_sample. The function, send_to_speaker(audio_sample), allows sending a 16-bit value to the speaker. 
\f1 \

\f0 There are five file scope variables that the program uses outside of the main program loop. The  audio_freq variable will be the frequency at which the speaker will be outputting. The value of this will change depending another value, k, which will be described below. The volume variable is arbitrarily set to 700 as this was found to be a good volume for headphone use. The variable k is 8-bits and holds the current key value that was read from the serial port. The variable, hold_freq_time, is the amount of time a frequency should be outputted. The rationale behind this is that lower frequencies on a piano typically are longer in duration than higher frequencies with respect to time. The value of this will be set depending on the value for k. The variable, time_last_freq_change, records the last time in seconds that the frequency was changed.. This will be useful in finding the total duration current frequency has outputted so far. Since the program should run continuously, all the code after the global variables is encapsulated with an unconditional while loop, while(1). The variable, ts, contains the time in seconds. mmsTicks is incremented every 0.1ms so by dividing by 10,000, we obtain time in seconds. A byte is read from the serial port using the function, read_serial_usb_byte(&k), and will return what was read by writing it to the variable, k. We then switch on k depending on forty different cases. Theses cases are ASCII values corresponding to the user's input from the keyboard. The grouping of these cases correspond to the harmonic series on a piano. It begins with the fifth harmonic, 440Hz, because it was found early on that the harmonics lower than the fifth would not produce any sound through the speaker. It ends in the eighth harmonic with the frequency 4186Hz. 
\f1 \

\f0 In each case, the byte will be written to the serial port using write_serial_usb_byte(k). This is unnecessary in producing sound but is helpful for to the user since this byte will appear in the terminal so he/she will know what key was pressed. It also sets a predefined frequency to the variable audio_freq which corresponds the piano key\'92s frequency.
\f1 \
\

\f0 In addition, the time for each key to output its time is also predefined and the variable, hold_freq_time, will be set accordingly. When a key is pressed, the time at which the key was pressed is recorded. This time information is set in the variable, time_last_freq_change which will set it to the current time.     
\f1 \

\f0 After the switch statement, there is a if statement to ensure that the time that each frequency is outputted via the speaker does not exceed its defined output frequency time as specified by the  hold_freq_time variable. The if loop is defined below:
\f1 \
\pard\pardeftab720\fi720\ri0\sl480\slmult1\partightenfactor0

\f0 \cf0 if (ts > ( hold_freq_time + time_last_freq_change)) \{  
\f1 \
\pard\pardeftab720\ri0\sl480\slmult1\partightenfactor0
\cf0 		
\f0 audio_freq =0;	
\f1 \
		
\f0 time_last_freq_change = ts;		
\f1 \
	\}\
\pard\pardeftab720\ri0\sl480\slmult1\partightenfactor0

\f0 \cf0 It compares the current time, ts, with the key\'92s hold_freq_time added with what time the key was set. If it returns false, then the frequency will continue to be outputted through the speaker. If it returns true, that means that enough time has elapsed and the frequency should stop being outputted through the speaker. The speaker is turned off by setting the audio_freq to zero.  The variable, time_last_freq_change, is updated to the current time since the frequency has been changed to zero. Finally, the audio_sample is calculated using: audio_sample = (int16_t) (volume * arm_sin_f32(audio_freq*ts)), and is outputted to the speaker using, send_to_speaker(audio_sample). These two are library functions and were briefly described above in the section, Software Libraries.         
\f1 \
\
\pard\pardeftab720\ri0\sl480\slmult1\partightenfactor0

\f0\b\fs28 \cf0 Conclusion
\f1\b0\fs22 \
\pard\pardeftab720\ri0\sl480\slmult1\partightenfactor0

\f0 \cf0 The project was successful in creating a sound synthesizer that resembled the functionality of a piano. The project incorporated two software libraries that provided methods for using the speaker and the serial port connection. It provides the user with the ability of pressing a key on the keyboard and having a predefined frequency play through a speaker. Communication from the computer to the board was made possible through the use of a terminal emulator, which allows the user to send an ASCII 8-bit key using the keyboard to the serial port. The program loaded onto the flash memory of the STM32F4 board was successfully able to read this byte and chose the correct defined frequency and output it via a speaker. The project accurately maps four octaves of a piano to standard computer keyboard and allows the user to use the keyboard to generate a sound, as you would use the instrument.  \
\pard\pardeftab720\ri0\sl480\slmult1\partightenfactor0

\f1 \cf0 \
\pard\pardeftab720\ri0\sl480\slmult1\partightenfactor0

\f0\b\fs28 \cf0 Appendix 
\f1\b0\fs22 \
\pard\pardeftab720\ri0\sl264\slmult1\sb120\sa120\partightenfactor0

\f0\b\fs16 \cf2 volatile
\b0 \cf0  
\b \cf3 uint32_t
\b0 \cf0  mmsTicks = 0;                      
\i \cf4 /* counts 0.1ms timeTicks       */
\f1\i0 \cf0 \uc0\u8232 \u8232 
\f0\i \cf4 // SysTick Handler (Interrupt Service Routine for the System Tick interrupt)
\f1\i0 \cf0 \uc0\u8232 
\f0\b \cf3 void
\b0 \cf0  SysTick_Handler(
\b \cf3 void
\b0 \cf0 )\{\uc0\u8232   mmsTicks++;\u8232 \}\u8232 \u8232 
\i \cf4 // initialize the system tick 
\f1\i0 \cf0 \uc0\u8232 
\f0\b \cf3 void
\b0 \cf0  init_systick(
\b \cf3 void
\b0 \cf0 )\{\uc0\u8232 	SystemCoreClockUpdate();                      
\i \cf4 /* Get Core Clock Frequency   */
\f1\i0 \cf0 \uc0\u8232 
\f0   
\b \cf2 if
\b0 \cf0  (SysTick_Config(SystemCoreClock / 10000)) \{ 
\i \cf4 /* SysTick 0.1 msec interrupts  */
\f1\i0 \cf0 \uc0\u8232 
\f0     
\b \cf2 while
\b0 \cf0  (1);                                  
\i \cf4 /* Capture error              */
\f1\i0 \cf0 \uc0\u8232 
\f0   \}\uc0\u8232 \}\u8232 \u8232 \u8232 
\b \cf3 int32_t
\b0 \cf0  main()\{\uc0\u8232 	SystemInit();\u8232 	init_systick();           
\i \cf4 //initializes the system tick handler
\f1\i0 \cf0 \uc0\u8232 	
\f0 init_serial_port_usb();  
\i \cf4 //initializes the usb serial port
\f1\i0 \cf0 \uc0\u8232 	
\f0 init_speaker();          
\i \cf4 //initializes the speaker
\f1\i0 \cf0 \uc0\u8232 	\u8232 	
\f0\b \cf3 int16_t
\b0 \cf0  audio_sample;    
\i \cf4 //one audio sample is 16 bits which is what the send_to_speaker() function uses as an argument
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf3 float
\b0 \cf0  audio_freq = 0;    
\i \cf4 //the frequency of the audio sample
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf3 int
\b0 \cf0  volume = 700;        
\i \cf4 //volume is how loud the output volume will be, it is the amplitude of the sin wave 
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf3 uint8_t
\b0 \cf0  k;	             
\i \cf4 //ascii key character value, used to hold the current key press
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf3 float
\b0 \cf0  hold_freq_time = 0;   
\i \cf4 //amount of time to output a frequency for a single key, k
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf3 float
\b0 \cf0  time_last_freq_change = 0;   
\i \cf4 //holds the most recent time when the key, k was changed
\f1\i0 \cf0 \uc0\u8232 	\u8232 	
\f0\b \cf2 while
\b0 \cf0  (1) \{
\f1\fs22 \
\pard\pardeftab720\li720\fi720\ri0\sl264\slmult1\sb120\sa120\partightenfactor0

\f0\i\fs16 \cf4 //time in seconds, mmsTicks increments every 0.1ms so dividing by 10,000 will give you time in seconds
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf3 float
\b0 \cf0  ts = mmsTicks / 10000.0;   
\f1\fs22 \
\pard\pardeftab720\li1440\ri0\sl264\slmult1\sb120\sa120\partightenfactor0

\f0\i\fs16 \cf4 // this function reads a key from the serial port and will return the value of 
\f1\i0 \cf0 \uc0\u8232 
\f0 read_serial_usb_byte(&k); 
\f1\fs22 \
\pard\pardeftab720\li1440\ri0\sl264\slmult1\sb120\sa120\partightenfactor0

\fs16 \cf0 \uc0\u8232 
\f0\i \cf4 //the key by writing it in the memory pointed to by &k
\f1\i0 \cf0 			\uc0\u8232 
\f0  
\i \cf4 //depending on which ascii key, k, was pressed, it writes the k value back to the serial usb port, sets the corresponding 
\f1\i0 \cf0 \uc0\u8232 
\f0\i \cf4 //frequency of that key, sets how long the frequency lasts, and sets the current time at which the key was pressed
\f1\i0 \cf0 \uc0\u8232 
\f0\b \cf2 switch
\b0 \cf0  (k) \{\uc0\u8232 					\u8232 
\i \cf4 /5th harmonic first regular row on a standard US keyboard 
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 '1'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 440; hold_freq_time = 0.360 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //A4
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 '2'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 466; hold_freq_time = 0.357 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //A4# 
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 '3'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 494; hold_freq_time = 0.353 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //B4
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 '4'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 523; hold_freq_time = 0.350 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //C4
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 '5'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 554; hold_freq_time = 0.347 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //C5#
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 '6'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 587; hold_freq_time = 0.344 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //D5
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 '7'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 622; hold_freq_time = 0.341 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //D5#
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 '8'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 659; hold_freq_time = 0.338 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //E5
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 '9'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 698; hold_freq_time = 0.334 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //F5
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 '0'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 740; hold_freq_time = 0.330 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //F5#
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 '-'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 784; hold_freq_time = 0.327 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //G5
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 '='
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 831; hold_freq_time = 0.323 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //G5#
\f1\i0 \cf0 \uc0\u8232 						\u8232 
\f0\i \cf4 //6th harmonic second regular row on a standard US keyboard 					
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 'q'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 880; hold_freq_time = 0.320 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //A5
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 'w'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 932; hold_freq_time = 0.318 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //A5#
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 'e'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 988; hold_freq_time = 0.316 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //B5
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 'r'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 1047; hold_freq_time = 0.314 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //C5							
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 't'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 1109; hold_freq_time = 0.312 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //C6#
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 'y'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 1175; hold_freq_time = 0.310 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //D6
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 ase
\b0 \cf0  
\b \cf5 'u'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 1245; hold_freq_time = 0.308 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //D6#
\f1\i0 \cf0 \uc0\u8232 
\f0    	
\b \cf2 case
\b0 \cf0  
\b \cf5 'i'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 1319; hold_freq_time = 0.306 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //E6
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 'o'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 1397; hold_freq_time = 0.304 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //F6
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 'p'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 1480; hold_freq_time = 0.302 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //F6#
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 '['
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 1568; hold_freq_time = 0.300 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //G6
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 ']'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 1661; hold_freq_time = 0.298 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //G6#
\f1\i0 \cf0 \uc0\u8232 		\u8232 
\f0\i \cf4 //7th harmonic shift + first regular row on a standard US keyboard 			
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 '!'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 1760; hold_freq_time = 0.296 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //A6
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 '@'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 1865; hold_freq_time = 0.294 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //A6#
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 '#'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 1980; hold_freq_time = 0.292 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //B6
\f1\i0 \cf0 \uc0\u8232 	
\f0  
\b \cf2 case
\b0 \cf0  
\b \cf5 '$'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 2093; hold_freq_time = 0.290 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //C7
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 '%'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 2218; hold_freq_time = 0.288 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //C7#
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 '^'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 2349; hold_freq_time = 0.286 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //D7
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 '&'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 2489; hold_freq_time = 0.284 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //D7#
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 '*'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 2637; hold_freq_time = 0.282 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //E7
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 '('
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 2794; hold_freq_time = 0.280 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //F7
\f1\i0 \cf0 \uc0\u8232 
\f0    	
\b \cf2 case
\b0 \cf0  
\b \cf5 ')'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 2960; hold_freq_time = 0.278 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //F7#
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 '_'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 3136; hold_freq_time = 0.276 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //G7
\f1\i0 \cf0 \uc0\u8232 	
\f0   
\b \cf2 case
\b0 \cf0  
\b \cf5 '+'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 3322; hold_freq_time = 0.274 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //G7#
\f1\i0 \cf0 \uc0\u8232 	\u8232 
\f0\i \cf4 //8th harmonic shift + second regular row on a standard US keyboard 				
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 'Q'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 3520; hold_freq_time = 0.272 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //A7
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 'W'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 3729; hold_freq_time = 0.270 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //A7#
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 'E'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 3951; hold_freq_time = 0.268 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //B7
\f1\i0 \cf0 \uc0\u8232 	
\f0\b \cf2 case
\b0 \cf0  
\b \cf5 'R'
\b0 \cf0 : write_serial_usb_byte(k); audio_freq = 4186; hold_freq_time = 0.266 ;time_last_freq_change = ts; 
\b \cf2 break
\b0 \cf0 ; 
\i \cf4 //C8
\f1\i0 \cf0 \uc0\u8232 \}
\f0  \uc0\u8232 			\u8232 
\i \cf4 //this checks to see if the amount of time each key should output its frequency has elapsed 
\f1\i0 \cf0 \uc0\u8232 
\f0\i \cf4 //it compares the current time, ts, with how long each key should output its frequency + when the key was pressed
\f1\i0 \cf0 \uc0\u8232 
\f0\i \cf4 //it 'turns off' the speaker by setting its frequency to 0
\f1\i0 \cf0 \uc0\u8232 
\f0\b \cf2 if
\b0 \cf0  (ts > ( hold_freq_time + time_last_freq_change)) \{  \uc0\u8232 	audio_freq =0;	\u8232 	time_last_freq_change = ts;		\u8232 \}\u8232 					\u8232 
\i \cf4 //a sin function is used so that it outputs a signal in uniform intervals
\f1\i0 \cf0 \uc0\u8232 
\f0 audio_sample = (
\b \cf3 int16_t
\b0 \cf0 ) (volume * arm_sin_f32(audio_freq*ts)); 
\i \cf4 // calculate one sample for the speaker
\f1\i0 \cf0 \uc0\u8232 
\f0\i \cf4 //the CMSIS arm_sin_f32 function from arm_math.h is typically faster than sin() from math.h
\f1\i0 \cf0 \uc0\u8232 
\f0 send_to_speaker(audio_sample);  
\i \cf4 //send one audio sample to the audio output
\f1\i0 \cf0 \uc0\u8232 
\fs22 \
\pard\pardeftab720\fi720\ri0\sl264\slmult1\sb120\sa120\partightenfactor0

\fs16 \cf0 \}
\fs22 \
\pard\pardeftab720\li1440\ri0\sl264\slmult1\sb120\sa120\partightenfactor0
\cf0 \
\pard\pardeftab720\ri0\sl264\slmult1\sb120\sa120\partightenfactor0

\fs16 \cf0 \}}